#include<bits/stdc++.h>

const unordered_map<string, int> valueSymbols = {
    {"M",1000},
    {"CM",900},
    {"D",500},
    {"CD",400},
    {"C",100},
    {"XC",90},
    {"L",50},
    {"XL",40},
    {"X",10},
    {"IX",9},
    {"V",5},
    {"IV",4},
    {"I",1},
};

void RomanToInt(string& s) {
    int num = 0;
    int n = s.size();
    for (int i = 0; i < n; ++i) {
        string tmp1 = s.substr(i, 3);
        string tmp2 = s.substr(i, 2);
        string tmp3 = s.substr(i, 1);

        if (valueSymbols.find(tmp1) != valueSymbols.end() && i + 3 <= n) {
            num += valueSymbols.at(tmp1);
            i += 2;
        }
        else if (valueSymbols.find(tmp2) != valueSymbols.end() && i + 2 <= n) {
            num += valueSymbols.at(tmp2);
            i += 1;
        }
        else {
            num += valueSymbols.at(tmp3);
        }
    }
    cout << num << endl;
}

int main() {
    int n;
    cin >> n;
    vector<string> s(n);
    for (int i = 0; i < n; ++i) {
        cin >> s[i];
    }

    for (int i = 0; i < n; ++i) {
        RomanToInt(s[i]);
    }

    return 0;
}
